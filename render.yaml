services:
  - type: worker
    name: queue
    region: ohio
    env: python
    buildCommand: "pip install -r backend/requirements.txt"
    startCommand: "celery --app backend.app.tasks worker --loglevel INFO --concurrency 4"
    autoDeploy: false
    envVars:
      - key: CELERY_BROKER_URL
        fromService:
          name: celery-rabbitmq
          type: rabbitmq
          property: connectionString
  - type: web
    name: app
    region: ohio
    env: python
    buildCommand: "./build.sh"
    startCommand: "cd backend && python main.py"
    autoDeploy: false
    envVars:
      - key: CELERY_BROKER_URL
        fromService:
          name: celery-rabbitmq
          type: rabbitmq
          property: connectionString
  - type: web
    name: flower
    region: ohio
    plan: free
    env: python
    buildCommand: "pip install -r backend/requirements.txt"
    startCommand: "celery flower --app backend.app.tasks --loglevel INFO"
    autoDeploy: false
    envVars:
      - key: CELERY_BROKER_URL
        fromService:
          type: rabbitmq
          name: celery-rabbitmq
          property: connectionString
  - type: rabbitmq
    name: celery-rabbitmq
    region: ohio
    plan: starter # we choose a plan with persistence to ensure tasks are not lost upon restart
    maxmemoryPolicy: noeviction # recommended policy for queues
    ipAllowList: [] # only allow internal connections
